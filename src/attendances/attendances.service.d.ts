import { ConfigService } from '@nestjs/config';
import { PrismaService } from '../prisma/prisma.service';
import { ClockInDto } from './dto/clock-in.dto';
import { ClockOutDto } from './dto/clock-out.dto';
import { RequestLeaveDto } from './dto/request-leave.dto';
import { AttendanceStatus } from '@prisma/client';
export declare class AttendancesService {
    private prisma;
    private configService;
    private readonly logger;
    constructor(prisma: PrismaService, configService: ConfigService);
    private get officeLatitude();
    private get officeLongitude();
    private get allowedRadiusMeters();
    clockIn(userId: number, clockInDto: ClockInDto, ip: string): Promise<{
        id: number;
        createdAt: Date;
        updatedAt: Date;
        status: import(".prisma/client").$Enums.AttendanceStatus;
        userId: number;
        submittedAt: Date | null;
        latitude: number | null;
        longitude: number | null;
        clockIn: Date | null;
        clockOut: Date | null;
        ipAddress: string | null;
        clockOutLatitude: number | null;
        clockOutLongitude: number | null;
        reasonDescription: string | null;
        proofFilePath: string | null;
        validatedBy: number | null;
        validatedAt: Date | null;
    }>;
    clockOut(userId: number, clockOutDto: ClockOutDto, ipAddress: string): Promise<{
        id: number;
        createdAt: Date;
        updatedAt: Date;
        status: import(".prisma/client").$Enums.AttendanceStatus;
        userId: number;
        submittedAt: Date | null;
        latitude: number | null;
        longitude: number | null;
        clockIn: Date | null;
        clockOut: Date | null;
        ipAddress: string | null;
        clockOutLatitude: number | null;
        clockOutLongitude: number | null;
        reasonDescription: string | null;
        proofFilePath: string | null;
        validatedBy: number | null;
        validatedAt: Date | null;
    }>;
    findAllForAdmin(page?: number, limit?: number): Promise<{
        data: ({
            user: {
                id: number;
                name: string;
                email: string;
                password: string;
                profilePhoto: string | null;
                namaLengkap: string | null;
                nimNisn: string | null;
                asalInstitusi: string | null;
                jurusanProdi: string | null;
                nomorTelepon: string | null;
                alamat: string | null;
                roleId: number;
                createdAt: Date;
                updatedAt: Date;
                deletedAt: Date | null;
                educationStatus: string | null;
                activityType: string | null;
                activityStart: Date | null;
                activityEnd: Date | null;
                isGraduated: boolean;
                isEmailVerified: boolean;
                emailOtp: string | null;
                emailOtpExpires: Date | null;
                lastOtpSentAt: Date | null;
                resetPasswordOtp: string | null;
                resetPasswordOtpExpires: Date | null;
            };
        } & {
            id: number;
            createdAt: Date;
            updatedAt: Date;
            status: import(".prisma/client").$Enums.AttendanceStatus;
            userId: number;
            submittedAt: Date | null;
            latitude: number | null;
            longitude: number | null;
            clockIn: Date | null;
            clockOut: Date | null;
            ipAddress: string | null;
            clockOutLatitude: number | null;
            clockOutLongitude: number | null;
            reasonDescription: string | null;
            proofFilePath: string | null;
            validatedBy: number | null;
            validatedAt: Date | null;
        })[];
        total: number;
        page: number;
        lastPage: number;
    }>;
    findAll(userId: number): Promise<{
        data: {
            id: number;
            createdAt: Date;
            updatedAt: Date;
            status: import(".prisma/client").$Enums.AttendanceStatus;
            userId: number;
            submittedAt: Date | null;
            latitude: number | null;
            longitude: number | null;
            clockIn: Date | null;
            clockOut: Date | null;
            ipAddress: string | null;
            clockOutLatitude: number | null;
            clockOutLongitude: number | null;
            reasonDescription: string | null;
            proofFilePath: string | null;
            validatedBy: number | null;
            validatedAt: Date | null;
        }[];
    }>;
    findOne(id: number): Promise<{
        id: number;
        createdAt: Date;
        updatedAt: Date;
        status: import(".prisma/client").$Enums.AttendanceStatus;
        userId: number;
        submittedAt: Date | null;
        latitude: number | null;
        longitude: number | null;
        clockIn: Date | null;
        clockOut: Date | null;
        ipAddress: string | null;
        clockOutLatitude: number | null;
        clockOutLongitude: number | null;
        reasonDescription: string | null;
        proofFilePath: string | null;
        validatedBy: number | null;
        validatedAt: Date | null;
    }>;
    private validateLocation;
    private calculateDistance;
    requestLeave(userId: number, dto: RequestLeaveDto, file: Express.Multer.File | null): Promise<{
        id: number;
        createdAt: Date;
        updatedAt: Date;
        status: import(".prisma/client").$Enums.AttendanceStatus;
        userId: number;
        submittedAt: Date | null;
        latitude: number | null;
        longitude: number | null;
        clockIn: Date | null;
        clockOut: Date | null;
        ipAddress: string | null;
        clockOutLatitude: number | null;
        clockOutLongitude: number | null;
        reasonDescription: string | null;
        proofFilePath: string | null;
        validatedBy: number | null;
        validatedAt: Date | null;
    }>;
    validateLeave(attendanceId: number, status: AttendanceStatus, adminId: number): Promise<{
        id: number;
        createdAt: Date;
        updatedAt: Date;
        status: import(".prisma/client").$Enums.AttendanceStatus;
        userId: number;
        submittedAt: Date | null;
        latitude: number | null;
        longitude: number | null;
        clockIn: Date | null;
        clockOut: Date | null;
        ipAddress: string | null;
        clockOutLatitude: number | null;
        clockOutLongitude: number | null;
        reasonDescription: string | null;
        proofFilePath: string | null;
        validatedBy: number | null;
        validatedAt: Date | null;
    }>;
    setTanpaKeteranganForAbsentUsers(): Promise<void>;
    exportAllAttendancesPdf(filter: {
        startDate?: string;
        endDate?: string;
        institution?: string;
    }, adminName: string): Promise<Buffer>;
    exportUserAttendancePdf(userId: number, filter: {
        startDate?: string;
        endDate?: string;
    }, adminName: string): Promise<Buffer>;
}
