import { CertificatesService } from './certificates.service';
import { CreateCertificateDto } from './dto/create-certificate.dto';
import { Response as ExpressResponse } from 'express';
export declare class CertificatesController {
    private readonly service;
    constructor(service: CertificatesService);
    generate(dto: CreateCertificateDto, req: any): Promise<{
        id: number;
        createdAt: Date;
        updatedAt: Date;
        status: import(".prisma/client").$Enums.CertificateStatus;
        userId: number;
        createdBy: number;
        certificateNumber: string;
        internName: string;
        educationalStatus: string;
        institusi: string;
        predicate: string;
        namaKegiatan: string;
        activityPeriod: string;
        tglSertifikat: Date;
        namaKepalaBPS: string;
        nipKepalaBPS: string;
        templatePath: string;
        signedFilePath: string | null;
        generatedAt: Date;
        signedAt: Date | null;
        issuedAt: Date | null;
        updatedBy: number | null;
    }>;
    uploadSigned(id: number, file: Express.Multer.File, req: any): Promise<{
        id: number;
        createdAt: Date;
        updatedAt: Date;
        status: import(".prisma/client").$Enums.CertificateStatus;
        userId: number;
        createdBy: number;
        certificateNumber: string;
        internName: string;
        educationalStatus: string;
        institusi: string;
        predicate: string;
        namaKegiatan: string;
        activityPeriod: string;
        tglSertifikat: Date;
        namaKepalaBPS: string;
        nipKepalaBPS: string;
        templatePath: string;
        signedFilePath: string | null;
        generatedAt: Date;
        signedAt: Date | null;
        issuedAt: Date | null;
        updatedBy: number | null;
    }>;
    issue(id: number, req: any): Promise<{
        id: number;
        createdAt: Date;
        updatedAt: Date;
        status: import(".prisma/client").$Enums.CertificateStatus;
        userId: number;
        createdBy: number;
        certificateNumber: string;
        internName: string;
        educationalStatus: string;
        institusi: string;
        predicate: string;
        namaKegiatan: string;
        activityPeriod: string;
        tglSertifikat: Date;
        namaKepalaBPS: string;
        nipKepalaBPS: string;
        templatePath: string;
        signedFilePath: string | null;
        generatedAt: Date;
        signedAt: Date | null;
        issuedAt: Date | null;
        updatedBy: number | null;
    }>;
    getOwn(req: any): Promise<{
        id: number;
        createdAt: Date;
        updatedAt: Date;
        status: import(".prisma/client").$Enums.CertificateStatus;
        userId: number;
        createdBy: number;
        certificateNumber: string;
        internName: string;
        educationalStatus: string;
        institusi: string;
        predicate: string;
        namaKegiatan: string;
        activityPeriod: string;
        tglSertifikat: Date;
        namaKepalaBPS: string;
        nipKepalaBPS: string;
        templatePath: string;
        signedFilePath: string | null;
        generatedAt: Date;
        signedAt: Date | null;
        issuedAt: Date | null;
        updatedBy: number | null;
    } | null>;
    uploadTemplate(file: Express.Multer.File, req: any): Promise<{
        success: boolean;
        message: string;
    }>;
    download(id: number, req: any, res: ExpressResponse): Promise<void>;
    checkTemplate(): Promise<{
        templateExists: boolean;
        templatePath: string | null;
    }>;
    getAllCertificates(req: any): Promise<({
        user: {
            id: number;
            name: string;
            email: string;
            namaLengkap: string | null;
            asalInstitusi: string | null;
            isGraduated: boolean;
        };
    } & {
        id: number;
        createdAt: Date;
        updatedAt: Date;
        status: import(".prisma/client").$Enums.CertificateStatus;
        userId: number;
        createdBy: number;
        certificateNumber: string;
        internName: string;
        educationalStatus: string;
        institusi: string;
        predicate: string;
        namaKegiatan: string;
        activityPeriod: string;
        tglSertifikat: Date;
        namaKepalaBPS: string;
        nipKepalaBPS: string;
        templatePath: string;
        signedFilePath: string | null;
        generatedAt: Date;
        signedAt: Date | null;
        issuedAt: Date | null;
        updatedBy: number | null;
    })[]>;
}
